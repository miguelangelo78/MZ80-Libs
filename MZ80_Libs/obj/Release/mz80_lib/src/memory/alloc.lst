                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Tue Dec 23 18:07:58 2014
                              5 ;--------------------------------------------------------
                              6 	.module alloc
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _sbrk
                             13 	.globl _find_free_block
                             14 	.globl _request_space
                             15 	.globl _malloc
                             16 	.globl _get_block_ptr
                             17 	.globl _free
                             18 ;--------------------------------------------------------
                             19 ; special function registers
                             20 ;--------------------------------------------------------
                             21 ;--------------------------------------------------------
                             22 ; ram data
                             23 ;--------------------------------------------------------
                             24 	.area _DATA
                             25 ;--------------------------------------------------------
                             26 ; ram data
                             27 ;--------------------------------------------------------
                             28 	.area _INITIALIZED
                             29 ;--------------------------------------------------------
                             30 ; absolute external ram data
                             31 ;--------------------------------------------------------
                             32 	.area _DABS (ABS)
                             33 ;--------------------------------------------------------
                             34 ; global & static initialisations
                             35 ;--------------------------------------------------------
                             36 	.area _HOME
                             37 	.area _GSINIT
                             38 	.area _GSFINAL
                             39 	.area _GSINIT
                             40 ;--------------------------------------------------------
                             41 ; Home
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _HOME
                             45 ;--------------------------------------------------------
                             46 ; code
                             47 ;--------------------------------------------------------
                             48 	.area _CODE
                             49 ;mz80_lib\src\memory\alloc.c:5: struct heap_meta * find_free_block(struct heap_meta ** last,size_t size){
                             50 ;	---------------------------------
                             51 ; Function find_free_block
                             52 ; ---------------------------------
   0000                      53 _find_free_block_start::
   0000                      54 _find_free_block:
   0000 DD E5         [15]   55 	push	ix
   0002 DD 21 00 00   [14]   56 	ld	ix,#0
   0006 DD 39         [15]   57 	add	ix,sp
                             58 ;mz80_lib\src\memory\alloc.c:6: struct heap_meta * curr = global_base;
   0008 ED 5Br00r00   [20]   59 	ld	de,(_global_base)
                             60 ;mz80_lib\src\memory\alloc.c:7: while(curr && !(curr->free && curr->size >= size)){
   000C                      61 00103$:
   000C 7A            [ 4]   62 	ld	a,d
   000D B3            [ 4]   63 	or	a,e
   000E 28 2C         [12]   64 	jr	Z,00105$
   0010 D5            [11]   65 	push	de
   0011 FD E1         [14]   66 	pop	iy
   0013 FD 66 04      [19]   67 	ld	h,4 (iy)
   0016 FD 7E 05      [19]   68 	ld	a, 5 (iy)
   0019 B4            [ 4]   69 	or	a,h
   001A 28 0F         [12]   70 	jr	Z,00104$
   001C 6B            [ 4]   71 	ld	l, e
   001D 62            [ 4]   72 	ld	h, d
   001E 46            [ 7]   73 	ld	b,(hl)
   001F 23            [ 6]   74 	inc	hl
   0020 66            [ 7]   75 	ld	h,(hl)
   0021 78            [ 4]   76 	ld	a,b
   0022 DD 96 06      [19]   77 	sub	a, 6 (ix)
   0025 7C            [ 4]   78 	ld	a,h
   0026 DD 9E 07      [19]   79 	sbc	a, 7 (ix)
   0029 30 11         [12]   80 	jr	NC,00105$
   002B                      81 00104$:
                             82 ;mz80_lib\src\memory\alloc.c:8: *last = curr;
   002B DD 6E 04      [19]   83 	ld	l,4 (ix)
   002E DD 66 05      [19]   84 	ld	h,5 (ix)
   0031 73            [ 7]   85 	ld	(hl),e
   0032 23            [ 6]   86 	inc	hl
   0033 72            [ 7]   87 	ld	(hl),d
                             88 ;mz80_lib\src\memory\alloc.c:9: curr = curr->next;
   0034 EB            [ 4]   89 	ex	de,hl
   0035 23            [ 6]   90 	inc	hl
   0036 23            [ 6]   91 	inc	hl
   0037 5E            [ 7]   92 	ld	e,(hl)
   0038 23            [ 6]   93 	inc	hl
   0039 56            [ 7]   94 	ld	d,(hl)
   003A 18 D0         [12]   95 	jr	00103$
   003C                      96 00105$:
                             97 ;mz80_lib\src\memory\alloc.c:11: return curr;
   003C EB            [ 4]   98 	ex	de,hl
   003D DD E1         [14]   99 	pop	ix
   003F C9            [10]  100 	ret
   0040                     101 _find_free_block_end::
                            102 ;mz80_lib\src\memory\alloc.c:14: struct heap_meta * request_space(struct heap_meta * last,size_t size){
                            103 ;	---------------------------------
                            104 ; Function request_space
                            105 ; ---------------------------------
   0040                     106 _request_space_start::
   0040                     107 _request_space:
   0040 DD E5         [15]  108 	push	ix
   0042 DD 21 00 00   [14]  109 	ld	ix,#0
   0046 DD 39         [15]  110 	add	ix,sp
                            111 ;mz80_lib\src\memory\alloc.c:16: block = sbrk(size+META_SIZE);
   0048 DD 7E 06      [19]  112 	ld	a,6 (ix)
   004B C6 06         [ 7]  113 	add	a, #0x06
   004D 6F            [ 4]  114 	ld	l,a
   004E DD 7E 07      [19]  115 	ld	a,7 (ix)
   0051 CE 00         [ 7]  116 	adc	a, #0x00
   0053 67            [ 4]  117 	ld	h,a
   0054 E5            [11]  118 	push	hl
   0055 CDr00r00      [17]  119 	call	_sbrk
   0058 F1            [10]  120 	pop	af
   0059 EB            [ 4]  121 	ex	de,hl
                            122 ;mz80_lib\src\memory\alloc.c:17: if (block == (void*) -1) return NULL;
   005A 7B            [ 4]  123 	ld	a,e
   005B 3C            [ 4]  124 	inc	a
   005C 20 09         [12]  125 	jr	NZ,00102$
   005E 7A            [ 4]  126 	ld	a,d
   005F 3C            [ 4]  127 	inc	a
   0060 20 05         [12]  128 	jr	NZ,00102$
   0062 21 00 00      [10]  129 	ld	hl,#0x0000
   0065 18 2F         [12]  130 	jr	00105$
   0067                     131 00102$:
                            132 ;mz80_lib\src\memory\alloc.c:19: if (last) last->next = block;
   0067 DD 7E 05      [19]  133 	ld	a,5 (ix)
   006A DD B6 04      [19]  134 	or	a,4 (ix)
   006D 28 0B         [12]  135 	jr	Z,00104$
   006F DD 6E 04      [19]  136 	ld	l,4 (ix)
   0072 DD 66 05      [19]  137 	ld	h,5 (ix)
   0075 23            [ 6]  138 	inc	hl
   0076 23            [ 6]  139 	inc	hl
   0077 73            [ 7]  140 	ld	(hl),e
   0078 23            [ 6]  141 	inc	hl
   0079 72            [ 7]  142 	ld	(hl),d
   007A                     143 00104$:
                            144 ;mz80_lib\src\memory\alloc.c:20: block->size = size;
   007A 6B            [ 4]  145 	ld	l, e
   007B 62            [ 4]  146 	ld	h, d
   007C DD 7E 06      [19]  147 	ld	a,6 (ix)
   007F 77            [ 7]  148 	ld	(hl),a
   0080 23            [ 6]  149 	inc	hl
   0081 DD 7E 07      [19]  150 	ld	a,7 (ix)
   0084 77            [ 7]  151 	ld	(hl),a
                            152 ;mz80_lib\src\memory\alloc.c:21: block->next = NULL;
   0085 6B            [ 4]  153 	ld	l, e
   0086 62            [ 4]  154 	ld	h, d
   0087 23            [ 6]  155 	inc	hl
   0088 23            [ 6]  156 	inc	hl
   0089 AF            [ 4]  157 	xor	a, a
   008A 77            [ 7]  158 	ld	(hl), a
   008B 23            [ 6]  159 	inc	hl
   008C 77            [ 7]  160 	ld	(hl), a
                            161 ;mz80_lib\src\memory\alloc.c:22: block->free = 0;
   008D 21 04 00      [10]  162 	ld	hl,#0x0004
   0090 19            [11]  163 	add	hl,de
   0091 AF            [ 4]  164 	xor	a, a
   0092 77            [ 7]  165 	ld	(hl), a
   0093 23            [ 6]  166 	inc	hl
   0094 77            [ 7]  167 	ld	(hl), a
                            168 ;mz80_lib\src\memory\alloc.c:23: return block;
   0095 EB            [ 4]  169 	ex	de,hl
   0096                     170 00105$:
   0096 DD E1         [14]  171 	pop	ix
   0098 C9            [10]  172 	ret
   0099                     173 _request_space_end::
                            174 ;mz80_lib\src\memory\alloc.c:26: void * malloc(size_t size){
                            175 ;	---------------------------------
                            176 ; Function malloc
                            177 ; ---------------------------------
   0099                     178 _malloc_start::
   0099                     179 _malloc:
   0099 F5            [11]  180 	push	af
                            181 ;mz80_lib\src\memory\alloc.c:28: if(size<=0) return NULL;
   009A 21 05 00      [10]  182 	ld	hl, #4+1
   009D 39            [11]  183 	add	hl, sp
   009E 7E            [ 7]  184 	ld	a, (hl)
   009F 2B            [ 6]  185 	dec	hl
   00A0 B6            [ 7]  186 	or	a,(hl)
   00A1 20 06         [12]  187 	jr	NZ,00102$
   00A3 21 00 00      [10]  188 	ld	hl,#0x0000
   00A6 C3r2Fr01      [10]  189 	jp	00113$
   00A9                     190 00102$:
                            191 ;mz80_lib\src\memory\alloc.c:30: if(!global_base){
   00A9 3Ar01r00      [13]  192 	ld	a,(#_global_base + 1)
   00AC 21r00r00      [10]  193 	ld	hl,#_global_base + 0
   00AF B6            [ 7]  194 	or	a,(hl)
   00B0 20 22         [12]  195 	jr	NZ,00111$
                            196 ;mz80_lib\src\memory\alloc.c:31: block = request_space(NULL,size);
   00B2 21 04 00      [10]  197 	ld	hl, #4
   00B5 39            [11]  198 	add	hl, sp
   00B6 4E            [ 7]  199 	ld	c, (hl)
   00B7 23            [ 6]  200 	inc	hl
   00B8 46            [ 7]  201 	ld	b, (hl)
   00B9 C5            [11]  202 	push	bc
   00BA 21 00 00      [10]  203 	ld	hl,#0x0000
   00BD E5            [11]  204 	push	hl
   00BE CDr40r00      [17]  205 	call	_request_space
   00C1 F1            [10]  206 	pop	af
   00C2 F1            [10]  207 	pop	af
   00C3 5D            [ 4]  208 	ld	e, l
   00C4 54            [ 4]  209 	ld	d, h
                            210 ;mz80_lib\src\memory\alloc.c:32: if(!block) return NULL;
   00C5 7A            [ 4]  211 	ld	a,d
   00C6 B3            [ 4]  212 	or	a,e
   00C7 20 05         [12]  213 	jr	NZ,00104$
   00C9 21 00 00      [10]  214 	ld	hl,#0x0000
   00CC 18 61         [12]  215 	jr	00113$
   00CE                     216 00104$:
                            217 ;mz80_lib\src\memory\alloc.c:33: global_base = block;
   00CE ED 53r00r00   [20]  218 	ld	(_global_base),de
   00D2 18 57         [12]  219 	jr	00112$
   00D4                     220 00111$:
                            221 ;mz80_lib\src\memory\alloc.c:35: struct heap_meta * last = global_base;
   00D4 3Ar00r00      [13]  222 	ld	a,(#_global_base + 0)
   00D7 FD 21 00 00   [14]  223 	ld	iy,#0
   00DB FD 39         [15]  224 	add	iy,sp
   00DD FD 77 00      [19]  225 	ld	0 (iy),a
   00E0 3Ar01r00      [13]  226 	ld	a,(#_global_base + 1)
   00E3 FD 21 00 00   [14]  227 	ld	iy,#0
   00E7 FD 39         [15]  228 	add	iy,sp
   00E9 FD 77 01      [19]  229 	ld	1 (iy),a
                            230 ;mz80_lib\src\memory\alloc.c:36: block = find_free_block(&last,size);
   00EC 21 00 00      [10]  231 	ld	hl,#0x0000
   00EF 39            [11]  232 	add	hl,sp
   00F0 FD 21 04 00   [14]  233 	ld	iy,#4
   00F4 FD 39         [15]  234 	add	iy,sp
   00F6 FD 4E 00      [19]  235 	ld	c,0 (iy)
   00F9 FD 46 01      [19]  236 	ld	b,1 (iy)
   00FC C5            [11]  237 	push	bc
   00FD E5            [11]  238 	push	hl
   00FE CDr00r00      [17]  239 	call	_find_free_block
   0101 F1            [10]  240 	pop	af
   0102 F1            [10]  241 	pop	af
   0103 EB            [ 4]  242 	ex	de,hl
                            243 ;mz80_lib\src\memory\alloc.c:37: if(!block){
   0104 7A            [ 4]  244 	ld	a,d
   0105 B3            [ 4]  245 	or	a,e
   0106 20 1B         [12]  246 	jr	NZ,00108$
                            247 ;mz80_lib\src\memory\alloc.c:38: block = request_space(last,size);
   0108 21 04 00      [10]  248 	ld	hl, #4
   010B 39            [11]  249 	add	hl, sp
   010C 7E            [ 7]  250 	ld	a, (hl)
   010D 23            [ 6]  251 	inc	hl
   010E 46            [ 7]  252 	ld	b, (hl)
   010F 4F            [ 4]  253 	ld	c, a
   0110 E1            [10]  254 	pop	hl
   0111 E5            [11]  255 	push	hl
   0112 C5            [11]  256 	push	bc
   0113 E5            [11]  257 	push	hl
   0114 CDr40r00      [17]  258 	call	_request_space
   0117 F1            [10]  259 	pop	af
   0118 F1            [10]  260 	pop	af
   0119 EB            [ 4]  261 	ex	de,hl
                            262 ;mz80_lib\src\memory\alloc.c:39: if(!block) return NULL;
   011A 7A            [ 4]  263 	ld	a,d
   011B B3            [ 4]  264 	or	a,e
   011C 20 0D         [12]  265 	jr	NZ,00112$
   011E 21 00 00      [10]  266 	ld	hl,#0x0000
   0121 18 0C         [12]  267 	jr	00113$
   0123                     268 00108$:
                            269 ;mz80_lib\src\memory\alloc.c:40: }else block->free = 0;
   0123 21 04 00      [10]  270 	ld	hl,#0x0004
   0126 19            [11]  271 	add	hl,de
   0127 AF            [ 4]  272 	xor	a, a
   0128 77            [ 7]  273 	ld	(hl), a
   0129 23            [ 6]  274 	inc	hl
   012A 77            [ 7]  275 	ld	(hl), a
   012B                     276 00112$:
                            277 ;mz80_lib\src\memory\alloc.c:42: return (block+1);
   012B 21 06 00      [10]  278 	ld	hl,#0x0006
   012E 19            [11]  279 	add	hl,de
   012F                     280 00113$:
   012F F1            [10]  281 	pop	af
   0130 C9            [10]  282 	ret
   0131                     283 _malloc_end::
                            284 ;mz80_lib\src\memory\alloc.c:47: struct heap_meta * get_block_ptr(void * ptr){
                            285 ;	---------------------------------
                            286 ; Function get_block_ptr
                            287 ; ---------------------------------
   0131                     288 _get_block_ptr_start::
   0131                     289 _get_block_ptr:
                            290 ;mz80_lib\src\memory\alloc.c:48: return (struct heap_meta*) ptr-1;
   0131 D1            [10]  291 	pop	de
   0132 C1            [10]  292 	pop	bc
   0133 C5            [11]  293 	push	bc
   0134 D5            [11]  294 	push	de
   0135 79            [ 4]  295 	ld	a,c
   0136 C6 FA         [ 7]  296 	add	a,#0xFA
   0138 57            [ 4]  297 	ld	d,a
   0139 78            [ 4]  298 	ld	a,b
   013A CE FF         [ 7]  299 	adc	a,#0xFF
   013C 5F            [ 4]  300 	ld	e,a
   013D 6A            [ 4]  301 	ld	l, d
   013E 63            [ 4]  302 	ld	h, e
   013F C9            [10]  303 	ret
   0140                     304 _get_block_ptr_end::
                            305 ;mz80_lib\src\memory\alloc.c:51: void * free (void * ptr){
                            306 ;	---------------------------------
                            307 ; Function free
                            308 ; ---------------------------------
   0140                     309 _free_start::
   0140                     310 _free:
                            311 ;mz80_lib\src\memory\alloc.c:53: if(!ptr) return NULL;
   0140 21 03 00      [10]  312 	ld	hl, #2+1
   0143 39            [11]  313 	add	hl, sp
   0144 7E            [ 7]  314 	ld	a, (hl)
   0145 2B            [ 6]  315 	dec	hl
   0146 B6            [ 7]  316 	or	a,(hl)
   0147 20 04         [12]  317 	jr	NZ,00102$
   0149 21 00 00      [10]  318 	ld	hl,#0x0000
   014C C9            [10]  319 	ret
   014D                     320 00102$:
                            321 ;mz80_lib\src\memory\alloc.c:54: block_ptr = get_block_ptr(ptr);
   014D C1            [10]  322 	pop	bc
   014E E1            [10]  323 	pop	hl
   014F E5            [11]  324 	push	hl
   0150 C5            [11]  325 	push	bc
   0151 E5            [11]  326 	push	hl
   0152 CDr31r01      [17]  327 	call	_get_block_ptr
   0155 F1            [10]  328 	pop	af
                            329 ;mz80_lib\src\memory\alloc.c:55: block_ptr -> free = 0;
   0156 01 04 00      [10]  330 	ld	bc,#0x0004
   0159 09            [11]  331 	add	hl,bc
   015A AF            [ 4]  332 	xor	a, a
   015B 77            [ 7]  333 	ld	(hl), a
   015C 23            [ 6]  334 	inc	hl
   015D 77            [ 7]  335 	ld	(hl), a
                            336 ;mz80_lib\src\memory\alloc.c:56: return NULL;
   015E 21 00 00      [10]  337 	ld	hl,#0x0000
   0161 C9            [10]  338 	ret
   0162                     339 _free_end::
                            340 	.area _CODE
                            341 	.area _INITIALIZER
                            342 	.area _CABS (ABS)
