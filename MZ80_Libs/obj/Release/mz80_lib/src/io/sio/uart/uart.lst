                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Tue Dec 23 03:03:10 2014
                              5 ;--------------------------------------------------------
                              6 	.module uart
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _clock_throttle
                             13 	.globl _uart_read_char
                             14 	.globl _uart_read_str
                             15 	.globl _uart_print_char
                             16 	.globl _uart_print_str
                             17 	.globl _uart_flush
                             18 	.globl _uart_clrscr
                             19 	.globl _uart_begin
                             20 	.globl _uart_end
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;mz80_lib\src\io\sio\uart\uart.c:3: char uart_read_char(){
                             53 ;	---------------------------------
                             54 ; Function uart_read_char
                             55 ; ---------------------------------
   0000                      56 _uart_read_char_start::
   0000                      57 _uart_read_char:
                             58 ;mz80_lib\src\io\sio\uart\uart.c:13: __endasm;
   0000 DB 1A         [11]   59 	IN A,(#(16 +8 +2))
   0002 CB 4F         [ 8]   60 	BIT #1,A
   0004 28 FA         [12]   61 	JR Z,_uart_read_char
   0006 DB 19         [11]   62 	IN A,(#(16 +8 +1))
   0008 6F            [ 4]   63 	LD L,A
   0009 C9            [10]   64 	RET
                             65 ;mz80_lib\src\io\sio\uart\uart.c:14: return 0;
   000A 2E 00         [ 7]   66 	ld	l,#0x00
   000C C9            [10]   67 	ret
   000D                      68 _uart_read_char_end::
                             69 ;mz80_lib\src\io\sio\uart\uart.c:17: char * uart_read_str(){
                             70 ;	---------------------------------
                             71 ; Function uart_read_str
                             72 ; ---------------------------------
   000D                      73 _uart_read_str_start::
   000D                      74 _uart_read_str:
                             75 ;mz80_lib\src\io\sio\uart\uart.c:19: return "";
   000D 21r11r00      [10]   76 	ld	hl,#___str_0
   0010 C9            [10]   77 	ret
   0011                      78 _uart_read_str_end::
   0011                      79 ___str_0:
   0011 00                   80 	.db 0x00
                             81 ;mz80_lib\src\io\sio\uart\uart.c:22: void uart_print_char(char data){
                             82 ;	---------------------------------
                             83 ; Function uart_print_char
                             84 ; ---------------------------------
   0012                      85 _uart_print_char_start::
   0012                      86 _uart_print_char:
                             87 ;mz80_lib\src\io\sio\uart\uart.c:36: __endasm;
   0012 D1            [10]   88 	POP DE
   0013 E1            [10]   89 	POP HL
   0014 45            [ 4]   90 	LD B,L
   0015 E5            [11]   91 	PUSH HL
   0016 D5            [11]   92 	PUSH DE
   0017                      93 	 uart_print_char_wait:
   0017 DB 1A         [11]   94 	IN A,(#(16 +8 +2))
   0019 CB 47         [ 8]   95 	BIT #0,A
   001B 20 FA         [12]   96 	JR NZ,uart_print_char_wait
   001D 78            [ 4]   97 	LD A,B
   001E D3 19         [11]   98 	OUT (#(16 +8 +1)),A
   0020 C9            [10]   99 	ret
   0021                     100 _uart_print_char_end::
                            101 ;mz80_lib\src\io\sio\uart\uart.c:39: void uart_print_str(char *str){
                            102 ;	---------------------------------
                            103 ; Function uart_print_str
                            104 ; ---------------------------------
   0021                     105 _uart_print_str_start::
   0021                     106 _uart_print_str:
   0021 3B            [ 6]  107 	dec	sp
                            108 ;mz80_lib\src\io\sio\uart\uart.c:40: unsigned char ret = 0;
   0022 FD 21 00 00   [14]  109 	ld	iy,#0
   0026 FD 39         [15]  110 	add	iy,sp
   0028 FD 36 00 00   [19]  111 	ld	0 (iy),#0x00
                            112 ;mz80_lib\src\io\sio\uart\uart.c:41: uart_begin();
   002C CDr66r00      [17]  113 	call	_uart_begin
                            114 ;mz80_lib\src\io\sio\uart\uart.c:42: while(ret==0)
   002F 21 03 00      [10]  115 	ld	hl, #3
   0032 39            [11]  116 	add	hl, sp
   0033 7E            [ 7]  117 	ld	a, (hl)
   0034 23            [ 6]  118 	inc	hl
   0035 66            [ 7]  119 	ld	h, (hl)
   0036 6F            [ 4]  120 	ld	l, a
   0037                     121 00104$:
   0037 FD 21 00 00   [14]  122 	ld	iy,#0
   003B FD 39         [15]  123 	add	iy,sp
   003D FD 7E 00      [19]  124 	ld	a,0 (iy)
                            125 ;mz80_lib\src\io\sio\uart\uart.c:43: if(*str=='\0') ret = 1;
   0040 B7            [ 4]  126 	or	a,a
   0041 20 14         [12]  127 	jr	NZ,00106$
   0043 B6            [ 7]  128 	or	a,(hl)
   0044 20 06         [12]  129 	jr	NZ,00102$
   0046 FD 36 00 01   [19]  130 	ld	0 (iy),#0x01
   004A 18 EB         [12]  131 	jr	00104$
   004C                     132 00102$:
                            133 ;mz80_lib\src\io\sio\uart\uart.c:44: else uart_print_char(*str++);
   004C 23            [ 6]  134 	inc	hl
   004D E5            [11]  135 	push	hl
   004E F5            [11]  136 	push	af
   004F 33            [ 6]  137 	inc	sp
   0050 CDr12r00      [17]  138 	call	_uart_print_char
   0053 33            [ 6]  139 	inc	sp
   0054 E1            [10]  140 	pop	hl
   0055 18 E0         [12]  141 	jr	00104$
   0057                     142 00106$:
                            143 ;mz80_lib\src\io\sio\uart\uart.c:45: uart_end();
   0057 CDr6Fr00      [17]  144 	call	_uart_end
   005A 33            [ 6]  145 	inc	sp
   005B C9            [10]  146 	ret
   005C                     147 _uart_print_str_end::
                            148 ;mz80_lib\src\io\sio\uart\uart.c:48: void uart_flush(){
                            149 ;	---------------------------------
                            150 ; Function uart_flush
                            151 ; ---------------------------------
   005C                     152 _uart_flush_start::
   005C                     153 _uart_flush:
                            154 ;mz80_lib\src\io\sio\uart\uart.c:49: uart_print_char(UART_FLUSH_C);
   005C 3E 18         [ 7]  155 	ld	a,#0x18
   005E F5            [11]  156 	push	af
   005F 33            [ 6]  157 	inc	sp
   0060 CDr12r00      [17]  158 	call	_uart_print_char
   0063 33            [ 6]  159 	inc	sp
   0064 C9            [10]  160 	ret
   0065                     161 _uart_flush_end::
                            162 ;mz80_lib\src\io\sio\uart\uart.c:52: void uart_clrscr(){
                            163 ;	---------------------------------
                            164 ; Function uart_clrscr
                            165 ; ---------------------------------
   0065                     166 _uart_clrscr_start::
   0065                     167 _uart_clrscr:
                            168 ;mz80_lib\src\io\sio\uart\uart.c:55: }
   0065 C9            [10]  169 	ret
   0066                     170 _uart_clrscr_end::
                            171 ;mz80_lib\src\io\sio\uart\uart.c:57: void uart_begin(){
                            172 ;	---------------------------------
                            173 ; Function uart_begin
                            174 ; ---------------------------------
   0066                     175 _uart_begin_start::
   0066                     176 _uart_begin:
                            177 ;mz80_lib\src\io\sio\uart\uart.c:58: clock_throttle(CLK_0041MHZ);
   0066 3E 01         [ 7]  178 	ld	a,#0x01
   0068 F5            [11]  179 	push	af
   0069 33            [ 6]  180 	inc	sp
   006A CDr00r00      [17]  181 	call	_clock_throttle
   006D 33            [ 6]  182 	inc	sp
   006E C9            [10]  183 	ret
   006F                     184 _uart_begin_end::
                            185 ;mz80_lib\src\io\sio\uart\uart.c:60: void uart_end(){
                            186 ;	---------------------------------
                            187 ; Function uart_end
                            188 ; ---------------------------------
   006F                     189 _uart_end_start::
   006F                     190 _uart_end:
                            191 ;mz80_lib\src\io\sio\uart\uart.c:61: clock_throttle(CLK_3MHZ);
   006F AF            [ 4]  192 	xor	a, a
   0070 F5            [11]  193 	push	af
   0071 33            [ 6]  194 	inc	sp
   0072 CDr00r00      [17]  195 	call	_clock_throttle
   0075 33            [ 6]  196 	inc	sp
   0076 C9            [10]  197 	ret
   0077                     198 _uart_end_end::
                            199 	.area _CODE
                            200 	.area _INITIALIZER
                            201 	.area _CABS (ABS)
