                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                              4 ; This file was generated Tue Dec 23 22:50:04 2014
                              5 ;--------------------------------------------------------
                              6 	.module system
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _uart_print_str
                             13 	.globl _out
                             14 	.globl _is_init
                             15 	.globl _init_pio
                             16 	.globl _init_lcd
                             17 	.globl _init_io
                             18 	.globl _init
                             19 	.globl _clock_throttle
                             20 	.globl _delay_ms
                             21 	.globl _delay_sec
                             22 	.globl _end
                             23 ;--------------------------------------------------------
                             24 ; special function registers
                             25 ;--------------------------------------------------------
                             26 ;--------------------------------------------------------
                             27 ; ram data
                             28 ;--------------------------------------------------------
                             29 	.area _DATA
                             30 ;--------------------------------------------------------
                             31 ; ram data
                             32 ;--------------------------------------------------------
                             33 	.area _INITIALIZED
   0000                      34 _is_init::
   0000                      35 	.ds 1
                             36 ;--------------------------------------------------------
                             37 ; absolute external ram data
                             38 ;--------------------------------------------------------
                             39 	.area _DABS (ABS)
                             40 ;--------------------------------------------------------
                             41 ; global & static initialisations
                             42 ;--------------------------------------------------------
                             43 	.area _HOME
                             44 	.area _GSINIT
                             45 	.area _GSFINAL
                             46 	.area _GSINIT
                             47 ;--------------------------------------------------------
                             48 ; Home
                             49 ;--------------------------------------------------------
                             50 	.area _HOME
                             51 	.area _HOME
                             52 ;--------------------------------------------------------
                             53 ; code
                             54 ;--------------------------------------------------------
                             55 	.area _CODE
                             56 ;mz80_lib\src\system\system.c:5: void init_pio(){
                             57 ;	---------------------------------
                             58 ; Function init_pio
                             59 ; ---------------------------------
   0000                      60 _init_pio_start::
   0000                      61 _init_pio:
                             62 ;mz80_lib\src\system\system.c:9: __endasm;
   0000 3E 82         [ 7]   63 	LD A,#130
   0002 D3 03         [11]   64 	OUT (#3),A
   0004 C9            [10]   65 	ret
   0005                      66 _init_pio_end::
                             67 ;mz80_lib\src\system\system.c:12: void init_lcd(){
                             68 ;	---------------------------------
                             69 ; Function init_lcd
                             70 ; ---------------------------------
   0005                      71 _init_lcd_start::
   0005                      72 _init_lcd:
                             73 ;mz80_lib\src\system\system.c:18: __endasm;
   0005 3E 0F         [ 7]   74 	LD A,#0x0F
   0007 D3 02         [11]   75 	OUT (#2),A
   0009 3E 00         [ 7]   76 	LD A,#0
   000B D3 0E         [11]   77 	OUT (#6 +8),A
   000D C9            [10]   78 	ret
   000E                      79 _init_lcd_end::
                             80 ;mz80_lib\src\system\system.c:21: void init_io(){
                             81 ;	---------------------------------
                             82 ; Function init_io
                             83 ; ---------------------------------
   000E                      84 _init_io_start::
   000E                      85 _init_io:
                             86 ;mz80_lib\src\system\system.c:22: init_pio();
   000E CDr00r00      [17]   87 	call	_init_pio
                             88 ;mz80_lib\src\system\system.c:23: init_lcd();
   0011 CDr05r00      [17]   89 	call	_init_lcd
                             90 ;mz80_lib\src\system\system.c:24: uart_print_str(""); // <- THIS IS TEMPORARY, THE LCD IS BUGGY AND THE 2ND CHARACTER IS NOT PRINTIN
   0014 21r1Dr00      [10]   91 	ld	hl,#___str_0
   0017 E5            [11]   92 	push	hl
   0018 CDr00r00      [17]   93 	call	_uart_print_str
   001B F1            [10]   94 	pop	af
   001C C9            [10]   95 	ret
   001D                      96 _init_io_end::
   001D                      97 ___str_0:
   001D 00                   98 	.db 0x00
                             99 ;mz80_lib\src\system\system.c:27: void init(){
                            100 ;	---------------------------------
                            101 ; Function init
                            102 ; ---------------------------------
   001E                     103 _init_start::
   001E                     104 _init:
                            105 ;mz80_lib\src\system\system.c:29: is_init = true;
   001E 21r00r00      [10]  106 	ld	hl,#_is_init + 0
   0021 36 01         [10]  107 	ld	(hl), #0x01
                            108 ;mz80_lib\src\system\system.c:30: init_io();
   0023 C3r0Er00      [10]  109 	jp	_init_io
   0026                     110 _init_end::
                            111 ;mz80_lib\src\system\system.c:33: void clock_throttle(char option){
                            112 ;	---------------------------------
                            113 ; Function clock_throttle
                            114 ; ---------------------------------
   0026                     115 _clock_throttle_start::
   0026                     116 _clock_throttle:
                            117 ;mz80_lib\src\system\system.c:34: out(CLOCK_THROTTLE,option);
   0026 21 02 00      [10]  118 	ld	hl, #2+0
   0029 39            [11]  119 	add	hl, sp
   002A 56            [ 7]  120 	ld	d, (hl)
   002B 1E 1C         [ 7]  121 	ld	e,#0x1C
   002D D5            [11]  122 	push	de
   002E CDr00r00      [17]  123 	call	_out
   0031 F1            [10]  124 	pop	af
   0032 C9            [10]  125 	ret
   0033                     126 _clock_throttle_end::
                            127 ;mz80_lib\src\system\system.c:37: void delay_ms(char ms){
                            128 ;	---------------------------------
                            129 ; Function delay_ms
                            130 ; ---------------------------------
   0033                     131 _delay_ms_start::
   0033                     132 _delay_ms:
                            133 ;mz80_lib\src\system\system.c:39: for(i=0;i<ms;i++){} // THIS FUNCTION IS VERY INACCURATE
   0033 16 00         [ 7]  134 	ld	d,#0x00
   0035                     135 00103$:
   0035 21 02 00      [10]  136 	ld	hl,#2
   0038 39            [11]  137 	add	hl,sp
   0039 7A            [ 4]  138 	ld	a,d
   003A 96            [ 7]  139 	sub	a, (hl)
   003B E2r40r00      [10]  140 	jp	PO, 00116$
   003E EE 80         [ 7]  141 	xor	a, #0x80
   0040                     142 00116$:
   0040 F0            [11]  143 	ret	P
   0041 14            [ 4]  144 	inc	d
   0042 18 F1         [12]  145 	jr	00103$
   0044 C9            [10]  146 	ret
   0045                     147 _delay_ms_end::
                            148 ;mz80_lib\src\system\system.c:42: void delay_sec(char sec){
                            149 ;	---------------------------------
                            150 ; Function delay_sec
                            151 ; ---------------------------------
   0045                     152 _delay_sec_start::
   0045                     153 _delay_sec:
                            154 ;mz80_lib\src\system\system.c:44: for(i=0;i<sec;i++) delay_ms(DELAY_1SEC);
   0045 16 00         [ 7]  155 	ld	d,#0x00
   0047                     156 00103$:
   0047 21 02 00      [10]  157 	ld	hl,#2
   004A 39            [11]  158 	add	hl,sp
   004B 7A            [ 4]  159 	ld	a,d
   004C 96            [ 7]  160 	sub	a, (hl)
   004D E2r52r00      [10]  161 	jp	PO, 00116$
   0050 EE 80         [ 7]  162 	xor	a, #0x80
   0052                     163 00116$:
   0052 F0            [11]  164 	ret	P
   0053 D5            [11]  165 	push	de
   0054 3E 14         [ 7]  166 	ld	a,#0x14
   0056 F5            [11]  167 	push	af
   0057 33            [ 6]  168 	inc	sp
   0058 CDr33r00      [17]  169 	call	_delay_ms
   005B 33            [ 6]  170 	inc	sp
   005C D1            [10]  171 	pop	de
   005D 14            [ 4]  172 	inc	d
   005E 18 E7         [12]  173 	jr	00103$
   0060 C9            [10]  174 	ret
   0061                     175 _delay_sec_end::
                            176 ;mz80_lib\src\system\system.c:47: void end(){
                            177 ;	---------------------------------
                            178 ; Function end
                            179 ; ---------------------------------
   0061                     180 _end_start::
   0061                     181 _end:
   0061                     182 00103$:
   0061 18 FE         [12]  183 	jr	00103$
   0063                     184 _end_end::
                            185 	.area _CODE
                            186 	.area _INITIALIZER
   0000                     187 __xinit__is_init:
   0000 00                  188 	.db #0x00	; 0
                            189 	.area _CABS (ABS)
